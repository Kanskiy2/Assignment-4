import streamlit as st
from dotenv import load_dotenv
load_dotenv()

from utils import normalize_coin_name
from services.binance_api import get_price
from services.coingecko_api import get_market_data
from services.cryptopanic_api import get_news
from services.gpt_response import generate_response

st.set_page_config(page_title="AI Crypto Assistant", layout="centered")
st.title("ü™ô AI Crypto Assistant")

user_input = st.text_input("–í–≤–µ–¥–∏—Ç–µ –º–æ–Ω–µ—Ç—É (–Ω–∞–ø—Ä. bitcoin, ethereum):").strip().lower()

if user_input:
    coin_symbol, coin_id = normalize_coin_name(user_input)

    if not coin_symbol or not coin_id:
        st.error("‚ùå –ú–æ–Ω–µ—Ç–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∏–ª–∏ –≤–≤–µ–¥–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π.")
    else:
        st.info("üîÑ –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ...")

        price = get_price(coin_symbol)
        market_data = get_market_data(coin_id)
        news = get_news(coin_symbol)

        if price and market_data:
            st.subheader(f"üìä –î–∞–Ω–Ω—ã–µ –ø–æ {market_data['name']}")
            st.markdown(f"**–¶–µ–Ω–∞:** ${price}")
            st.markdown(f"**–ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è:** ${market_data['market_cap']}")
            st.markdown(f"**–†–∞–Ω–≥:** {market_data['rank']}")

            st.subheader("üì∞ –ù–æ–≤–æ—Å—Ç–∏:")
            for n in news:
                st.markdown(f"- {n}")

            st.subheader("ü§ñ –û—Ç–≤–µ—Ç –æ—Ç AI:")
            gpt_text = generate_response(user_input, price, market_data, news)
            st.success(gpt_text)
        else:
            st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å Binance –∏–ª–∏ CoinGecko.")
